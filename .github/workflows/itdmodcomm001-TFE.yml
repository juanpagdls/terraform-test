# Pipeline Terraform
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#

name: 'itdmodcomm001'

env:
  environment: 'dev'
  resource-name: 'staitdjpgcomm004'
  resource-group: 'sgtd2weursgitdmodcomm001'
  #storage-account: 'sgtd2weustaitdmodcomm001'
  storage-account: 'sgtp2weustaitestccrit002' 
  container-name: 'tfstate'
  
on:
  push:
    branches:
      - terraform-v1
    paths:
      - '**itdmodcomm001-TFE.yml'

permissions:
  contents: read

jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev
    
    defaults:
      run:
        shell: bash
        working-directory: '${{ github.workspace }}/terraform/${{ github.workflow }}/${{ env.resource-name }}'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Credentials for Terraform Enterprise (TFE) 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_hostname: 'tfe1.sgtech.corp'
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    #- name: Terraform Init
    #  id: init
    #  run: terraform init
      #run: terraform init -no-color -reconfigure
    
    #- name: Terraform Validate
    #  id: validate
    #  run: terraform validate -no-color
    
      # Run a terraform plan for pull requests only
    - name: Terraform Plan
      id: plan
       #if: github.event_name == 'pull_request'
      run: terraform plan -no-color

    - run: echo ${{ steps.plan.outputs.stdout }}
    - run: echo ${{ steps.plan.outputs.stderr }}
    - run: echo ${{ steps.plan.outputs.exitcode }}
  

    # On push to main, build or change infrastructure according to Terraform configuration files
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #  env:
    #    ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #    ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #    ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    #    ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #  run: terraform apply -auto-approve